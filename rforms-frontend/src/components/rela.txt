import React, { useState } from 'react';
import '../styles/RelatorioPlantao.css';

export default function RelatorioPlantao() {
  const [data, setData] = useState({
    nome: '',
    matricula: '',
    dataInicio: '',
    horaInicio: '',
    dataSaida: '',
    horaSaida: '',
    objetos: {},
    patrulhamento: {}, 
    observacoes: '',
    fotos: null,
    videos: null,
  });

  const objetosList = [
    '15 Cones','20 Cones','25 Cones','30 Cones','39 Cones',
    'Celular','Carregador do celular','Outros / tirar foto','Nenhuma das op√ß√µes',
  ];

  const patrulhamentoList = [
    'Distrito Boca da Mata',
    'Povoado Olhos d‚Äô√Ågua',
    'Distrito Santo Ant√¥nio',
    'Vila Jos√© Paulino',
    'Centro',
    'Usina Brasileira',
    'Povoado Sapucaia',
    'Povoado Boa F√©',
    'Distrito Branca de Atalaia',
    'Povoado Ouricuri',
    'Povoado Porongaba'
  ];

  const handleChange = (e) => {
    const { name, value, type, checked, files } = e.target;

    if (type === 'checkbox') {
      setData(prev => ({ ...prev, objetos: { ...prev.objetos, [name]: checked } }));
    } else if (type === 'file') {
      setData(prev => ({ ...prev, [name]: files }));
    } else if (type.startsWith('patrulhamento-')) {
      const distrito = name.split('-')[1];
      setData(prev => ({
        ...prev,
        patrulhamento: { ...prev.patrulhamento, [distrito]: value }
      }));
    } else {
      setData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const formDataToSend = new FormData();
    Object.keys(data).forEach(key => {
      if (key === 'objetos' || key === 'patrulhamento') {
        formDataToSend.append(key, JSON.stringify(data[key]));
      } else if (key === 'fotos' || key === 'videos') {
        if (data[key]) Array.from(data[key]).forEach(file => formDataToSend.append(key, file));
      } else {
        formDataToSend.append(key, data[key]);
      }
    });

    try {
      const res = await fetch('http://localhost:5000/submit', { method: 'POST', body: formDataToSend });
      if (!res.ok) {
        const errorData = await res.json();
        alert(`Erro do servidor: ${errorData.error || res.statusText}`);
        return;
      }
      const result = await res.json();
      alert(result.message || 'Relat√≥rio enviado com sucesso!');
    } catch (err) {
      console.error(err);
      alert(err.message.includes('Failed to fetch') 
        ? 'N√£o foi poss√≠vel conectar ao servidor. Verifique se ele est√° rodando na porta 5000.'
        : `Erro desconhecido: ${err.message}`);
    }
  };

  return (
    <div className="form-container">
      <h1>INSPETORES GCM ATALAIA - AL</h1>
      <h2>Relat√≥rio de Plant√£o</h2>
      <form onSubmit={handleSubmit} className="form-base">
        <div className="field-group">
          <label>Nome:</label>
          <input type="text" name="nome" value={data.nome} onChange={handleChange} required />
        </div>

        <div className="field-group">
          <label>Matr√≠cula:</label>
          <input type="text" name="matricula" value={data.matricula} onChange={handleChange} required />
        </div>

        <div className="field-group">
          <label>Data In√≠cio:</label>
          <input type="date" name="dataInicio" value={data.dataInicio} onChange={handleChange} required />
          <label>Hora In√≠cio:</label>
          <input type="time" name="horaInicio" value={data.horaInicio} onChange={handleChange} required />
        </div>

        <div className="field-group">
          <label>Data Sa√≠da:</label>
          <input type="date" name="dataSaida" value={data.dataSaida} onChange={handleChange} required />
          <label>Hora Sa√≠da:</label>
          <input type="time" name="horaSaida" value={data.horaSaida} onChange={handleChange} required />
        </div>

        <fieldset className="checkbox-group">
          <legend>Objetos encontrados na base:</legend>
          {objetosList.map(item => (
            <label key={item}>
              <input type="checkbox" name={item} checked={!!data.objetos[item]} onChange={handleChange} />
              {item}
            </label>
          ))}
        </fieldset>

        <fieldset className="patrulhamento-group">
          <legend>Patrulhamento Preventivo:</legend>
          {patrulhamentoList.map(item => (
            <div key={item} className="patrulhamento-item">
              <strong>{item}</strong>
              <input
                type="text"
                name={`patrulhamento-${item}`}
                placeholder="Nome"
                value={data.patrulhamento[item] || ''}
                onChange={handleChange}
              />
            </div>
              <p className="patrulhamento-texto">
                {patrulhamentoTextos[item]}
              </p>
          ))}
        </fieldset>

        <fieldset className="observacoes-group">
          <legend>Observa√ß√µes:</legend>
          <textarea
            name="observacoes"
            placeholder="Escreva suas observa√ß√µes aqui"
            value={data.observacoes}
            onChange={handleChange}
            rows={4}
          />

          <legend style={{ marginTop: '20px' }}>Importar Fotos</legend>
          <label htmlFor="fotos" className="upload-label">üì∑ Selecionar Fotos</label>
          <input id="fotos" type="file" name="fotos" accept="image/*" multiple onChange={handleChange} />
          {data.fotos?.length > 0 && <p className="upload-info">{data.fotos.length} foto(s) selecionada(s)</p>}

          <legend>Importar V√≠deos</legend>
          <label htmlFor="videos" className="upload-label">üé• Selecionar V√≠deos</label>
          <input id="videos" type="file" name="videos" accept="video/*" multiple onChange={handleChange} />
          {data.videos?.length > 0 && <p className="upload-info">{data.videos.length} v√≠deo(s) selecionado(s)</p>}
        </fieldset>

        <button type="submit" className="form-button">Enviar Relat√≥rio</button>
      </form>
    </div>
  );
}
